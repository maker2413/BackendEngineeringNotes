#+TITLE: Publish Subscribe (Pub/Sub)

"One publisher many readers".

With Pub/Sub we have the concepts of publishers and subscribers to those topics
as the name would imply.

Pub/Sub pros and cons
- Pros
  - Scales with multiple receivers
  - Great for microservices
  - Loose coupling
  - works while clients not running
- Cons
  - Message delivery issues
  - Complexity
  - Network saturation

Since the concept of Pub/Sub is relatively simple let's dive right into a
demo. Just like in previous sections we have a demo application in this
directory that can be run with: ~node index.js~.

#+begin_src markdown
  ## docker commands

  ### Spin rabbitmq server docker
  docker run --name rabbitmq -p 5672:5672  -d rabbitmq

  ### Spin rabbitmq server HTTP server docker

  docker run --name rabbitmq -p 5672:5672 -p 15672:15672 -d rabbitmq:3-management



  HTTP
  fetch("http://localhost:15672/api/vhosts”, {headers: {"Authorization" : `Basic ${btoa('guest:guest')}`}}).then(a=>a.json()).then(console.log)


  fetch("http://localhost:15672/api/channels", {headers: {"Authorization" : `Basic ${btoa('guest:guest')}`}}).then(a=>a.json()).then(console.log)


  fetch("http://localhost:15672/api/queues", {headers: {"Authorization" : `Basic ${btoa('guest:guest')}`}}).then(a=>a.json()).then(console.log)
#+end_src
