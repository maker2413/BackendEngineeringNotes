#+TITLE: Server Sent Events

"One Request, a very very long response".

Limitations of Request/Response:
- Vanilla Request/Response isn't ideal for notifications from backend
- Client wants real time notifications from the backend
  - A user just logged in
  - A message is just received
- Push works but is restrictive
- Server Sent Events work with Request/Response
- Designed for HTTP

What is Server Sent Events?
- A response has start and end
- Client sends a request
- Server sends logical events as part of response
- Server never writes the end of the response
- It is still a request, but an unending response
- Client parses the streams of data looking for the events
- Works with request/response (HTTP)

Server Sent Events Pros and Cons
- Pros
  - Real time
  - Compatible with Request/Response
- Cons
  - Clients must be online
  - Clients might not be able to handle
  - Polling is preferred for light clients
  - HTTP/1.1 problem (6 connections)

Just like with other topics there is a demo application included. This program
can be run with ~node index.js~. Once the server is up and running in a web
browser of your choosing you can navigate to =localhost:8888= and open the
console. Paste the following into the console:
#+begin_src javascript
  let sse = new EventSource("http://localhost:8080/stream");
  sse.onmessage = console.log
#+end_src

Once that is pasted into the console you can see that the server is responding
with Events.
