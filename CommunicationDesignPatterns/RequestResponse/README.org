#+TITLE: Request Response

Request/Response is the most famous communication design pattern. If you think
about it Request/Response is the design pattern you encounter most in your
life. You make a request and the application responds to you.

For The Request Response model to work the following chain of events take place:
- Client sends a request
- Server parses the request
- Server processes the request
- Server sends the response
- Client parses the response and consumes

Request response can be found in many of your daily activities. Some include:
- Web, HTTP, DNS, SSH
- RPC (remote procedure call)
- SQL and Database Protocols
- APIs (REST/SOAP/GraphQL)

Let's now look at the anatomy of a request/response:
- A request structure is defined by both client and server
- Request has a boundary
- Defined by a protocol and message format
- Same for the response
- For example an HTTP Request:
  #+BEGIN_EXAMPLE
    GET / HTTP/1.1
    Headers
    <CRLF>
    BODY
  #+END_EXAMPLE

Let's now think of a real world example of a request response service. Let us
talk about how we would build out a service that allows users to upload
images. There are a few ways we could implement this:
- Send large request with the image (simple)
  - Here we would allow users to upload the entire contents of the image at
    once. The problem with this approach, even though it is the easiest, is that
    there are limitations to consider here like interruptions.
- Chunk image and send a request per chunk (resumable)
  - With this approach the image upload will be resumable if any interruptions
    occur.

The problem with Request/Response is that it does not work everywhere. Some
examples of places that the request response model will not work are:
- Notification service
  - In the example of a notification service there is no response being made by
    the client.
- Chatting Application
  - Technically you could build out a chatting application with
    response/request, but the client would have to be reaching out constantly
    asking if it has a new message just for the server to continually say no
    until a message needs to be sent. This is completely unreasonable and should
    not be done.
- Long running requests
  - If a request will take a long time to process it is better to use a
    different communication pattern than response/request because the client
    will be waiting for a response during the entire processing time.
  - Long requests can also be challenging with response/request because we have
    to think about things like what if the client disconnects during the
    processing time.

To wrap up this section let's look at a real example of request/response in
action:
#+name: curl
#+begin_src bash :results raw :exports both
  curl -v --trace out.txt http://google.com
#+end_src

This gives us the following response from the server:
#+RESULTS: curl
<HTML><HEAD><meta http-equiv="content-type" content="text/html;charset=utf-8">
<TITLE>301 Moved</TITLE></HEAD><BODY>
<H1>301 Moved</H1>
The document has moved
<A HREF="http://www.google.com/">here</A>.
</BODY></HTML>

The above ~curl~ command also about all of the trace information to
=out.txt=. We can show the contents of that file with:
#+name: cat
#+begin_src bash :results raw :exports both
  cat out.txt
#+end_src

Below here we can follow the entire transaction we made with Google:
#+RESULTS: cat
== Info: Host google.com:80 was resolved.
== Info: IPv6: 2607:f8b0:4009:819::200e
== Info: IPv4: 142.250.191.174
== Info:   Trying [2607:f8b0:4009:819::200e]:80...
== Info: Connected to google.com (2607:f8b0:4009:819::200e) port 80
== Info: using HTTP/1.x
=> Send header, 74 bytes (0x4a)
0000: 47 45 54 20 2f 20 48 54 54 50 2f 31 2e 31 0d 0a GET / HTTP/1.1..
0010: 48 6f 73 74 3a 20 67 6f 6f 67 6c 65 2e 63 6f 6d Host: google.com
0020: 0d 0a 55 73 65 72 2d 41 67 65 6e 74 3a 20 63 75 ..User-Agent: cu
0030: 72 6c 2f 38 2e 31 31 2e 30 0d 0a 41 63 63 65 70 rl/8.11.0..Accep
0040: 74 3a 20 2a 2f 2a 0d 0a 0d 0a                   t: */*....
== Info: Request completely sent off
<= Recv header, 32 bytes (0x20)
0000: 48 54 54 50 2f 31 2e 31 20 33 30 31 20 4d 6f 76 HTTP/1.1 301 Mov
0010: 65 64 20 50 65 72 6d 61 6e 65 6e 74 6c 79 0d 0a ed Permanently..
<= Recv header, 34 bytes (0x22)
0000: 4c 6f 63 61 74 69 6f 6e 3a 20 68 74 74 70 3a 2f Location: http:/
0010: 2f 77 77 77 2e 67 6f 6f 67 6c 65 2e 63 6f 6d 2f /www.google.com/
0020: 0d 0a                                           ..
<= Recv header, 40 bytes (0x28)
0000: 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74 65 Content-Type: te
0010: 78 74 2f 68 74 6d 6c 3b 20 63 68 61 72 73 65 74 xt/html; charset
0020: 3d 55 54 46 2d 38 0d 0a                         =UTF-8..
<= Recv header, 245 bytes (0xf5)
0000: 43 6f 6e 74 65 6e 74 2d 53 65 63 75 72 69 74 79 Content-Security
0010: 2d 50 6f 6c 69 63 79 2d 52 65 70 6f 72 74 2d 4f -Policy-Report-O
0020: 6e 6c 79 3a 20 6f 62 6a 65 63 74 2d 73 72 63 20 nly: object-src 
0030: 27 6e 6f 6e 65 27 3b 62 61 73 65 2d 75 72 69 20 'none';base-uri 
0040: 27 73 65 6c 66 27 3b 73 63 72 69 70 74 2d 73 72 'self';script-sr
0050: 63 20 27 6e 6f 6e 63 65 2d 61 4a 5a 74 57 4b 47 c 'nonce-aJZtWKG
0060: 65 70 75 73 66 69 38 43 76 55 32 32 39 6c 41 27 epusfi8CvU229lA'
0070: 20 27 73 74 72 69 63 74 2d 64 79 6e 61 6d 69 63  'strict-dynamic
0080: 27 20 27 72 65 70 6f 72 74 2d 73 61 6d 70 6c 65 ' 'report-sample
0090: 27 20 27 75 6e 73 61 66 65 2d 65 76 61 6c 27 20 ' 'unsafe-eval' 
00a0: 27 75 6e 73 61 66 65 2d 69 6e 6c 69 6e 65 27 20 'unsafe-inline' 
00b0: 68 74 74 70 73 3a 20 68 74 74 70 3a 3b 72 65 70 https: http:;rep
00c0: 6f 72 74 2d 75 72 69 20 68 74 74 70 73 3a 2f 2f ort-uri https://
00d0: 63 73 70 2e 77 69 74 68 67 6f 6f 67 6c 65 2e 63 csp.withgoogle.c
00e0: 6f 6d 2f 63 73 70 2f 67 77 73 2f 6f 74 68 65 72 om/csp/gws/other
00f0: 2d 68 70 0d 0a                                  -hp..
<= Recv header, 37 bytes (0x25)
0000: 44 61 74 65 3a 20 53 75 6e 2c 20 30 31 20 44 65 Date: Sun, 01 De
0010: 63 20 32 30 32 34 20 31 35 3a 35 35 3a 35 39 20 c 2024 15:55:59 
0020: 47 4d 54 0d 0a                                  GMT..
<= Recv header, 40 bytes (0x28)
0000: 45 78 70 69 72 65 73 3a 20 54 75 65 2c 20 33 31 Expires: Tue, 31
0010: 20 44 65 63 20 32 30 32 34 20 31 35 3a 35 35 3a  Dec 2024 15:55:
0020: 35 39 20 47 4d 54 0d 0a                         59 GMT..
<= Recv header, 40 bytes (0x28)
0000: 43 61 63 68 65 2d 43 6f 6e 74 72 6f 6c 3a 20 70 Cache-Control: p
0010: 75 62 6c 69 63 2c 20 6d 61 78 2d 61 67 65 3d 32 ublic, max-age=2
0020: 35 39 32 30 30 30 0d 0a                         592000..
<= Recv header, 13 bytes (0xd)
0000: 53 65 72 76 65 72 3a 20 67 77 73 0d 0a          Server: gws..
<= Recv header, 21 bytes (0x15)
0000: 43 6f 6e 74 65 6e 74 2d 4c 65 6e 67 74 68 3a 20 Content-Length: 
0010: 32 31 39 0d 0a                                  219..
<= Recv header, 21 bytes (0x15)
0000: 58 2d 58 53 53 2d 50 72 6f 74 65 63 74 69 6f 6e X-XSS-Protection
0010: 3a 20 30 0d 0a                                  : 0..
<= Recv header, 29 bytes (0x1d)
0000: 58 2d 46 72 61 6d 65 2d 4f 70 74 69 6f 6e 73 3a X-Frame-Options:
0010: 20 53 41 4d 45 4f 52 49 47 49 4e 0d 0a           SAMEORIGIN..
<= Recv header, 2 bytes (0x2)
0000: 0d 0a                                           ..
<= Recv data, 219 bytes (0xdb)
0000: 3c 48 54 4d 4c 3e 3c 48 45 41 44 3e 3c 6d 65 74 <HTML><HEAD><met
0010: 61 20 68 74 74 70 2d 65 71 75 69 76 3d 22 63 6f a http-equiv="co
0020: 6e 74 65 6e 74 2d 74 79 70 65 22 20 63 6f 6e 74 ntent-type" cont
0030: 65 6e 74 3d 22 74 65 78 74 2f 68 74 6d 6c 3b 63 ent="text/html;c
0040: 68 61 72 73 65 74 3d 75 74 66 2d 38 22 3e 0a 3c harset=utf-8">.<
0050: 54 49 54 4c 45 3e 33 30 31 20 4d 6f 76 65 64 3c TITLE>301 Moved<
0060: 2f 54 49 54 4c 45 3e 3c 2f 48 45 41 44 3e 3c 42 /TITLE></HEAD><B
0070: 4f 44 59 3e 0a 3c 48 31 3e 33 30 31 20 4d 6f 76 ODY>.<H1>301 Mov
0080: 65 64 3c 2f 48 31 3e 0a 54 68 65 20 64 6f 63 75 ed</H1>.The docu
0090: 6d 65 6e 74 20 68 61 73 20 6d 6f 76 65 64 0a 3c ment has moved.<
00a0: 41 20 48 52 45 46 3d 22 68 74 74 70 3a 2f 2f 77 A HREF="http://w
00b0: 77 77 2e 67 6f 6f 67 6c 65 2e 63 6f 6d 2f 22 3e ww.google.com/">
00c0: 68 65 72 65 3c 2f 41 3e 2e 0d 0a 3c 2f 42 4f 44 here</A>...</BOD
00d0: 59 3e 3c 2f 48 54 4d 4c 3e 0d 0a                Y></HTML>..
== Info: Connection #0 to host google.com left intact

In the above output the arrows to the right(~=>~) are requests we sent to the
server and the arrows to the left(~<=~) are the responses the server gave us.
