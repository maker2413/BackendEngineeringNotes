#+TITLE: WebRTC

WebRTC Overview:
- Stands for Web Real-Time Communication
- Find a peer to peer path to exchange video and audio in an efficient and low
  latency manner
- Standardized API
- Enables rich communications browsers, mobile, IOT devices
- A wants to connect to B
- A finds out all possible ways the public can connect to it
- B finds out all possible ways the public can connect to it
- A and B signal this session information via other means
  - WhatsApp, QR, Tweet, WebSockets, HTTP Fetch
- A connects to B via the most optimal path
- A & B also exchanges their supported media and security

WebRTC Demystified:
- NAT (Network Address Translation)
- STUN, TURN
- ICE
- SDP
- Signaling the SDP

NAT Translations Method:
- One to One NAT (Full-cone NAT)
- Address restricted NAT
- Port restricted NAT
- Symmetric NAT

One to One NAT (Full cone NAT):
- Packets to external IP:port on the router always maps to internal IP:port
  without exceptions

Address Restricted NAT:
- Packets to external IP:port on the router always maps to internal IP:port as
  long as source address from packet matches the table (regardless of port)
- Allow if we communicated with this host before

Port Restricted NAT:
- Packets to external IP:port on the router always maps to internal IP:port as
  long as source address and port from packet matches the table
- Allow if we communicated with this host:port before

Symmetric NAT:
- Packets to external IP:port on the router always maps to internal IP:port as
  long as source address and port from packet matches the table
- Only Allow if the full pair match

STUN:
- Session Traversal Utilities for NAT
- Tell me my public IP address/port through NAT
- Works for Full-cone, Port/Address restricted NAT
- Doesn't work for Symmetric NAT
- STUN server port 3478, 5349 for TLS
- Cheap to maintain

TURN:
- Traversal Using Relays around NAT
- In case of Symmetric NAT we use TURN
- It's just a server that relays packets
- TURN default server port 3478, 5349 for TLS
- Expensive to maintain and run

ICE:
- Interactive Connectivity Establishment
- ICE collects all available candidates (local IP addresses, reflexive addresses
  - STUN ones and relayed addresses - TURN ones)
- Called ice candidates
- All the collected addresses are then sent to the remote peer via SDP

SDP:
- Session Description Protocol
- A format that describes ice candidates, networking options, media options,
  security options, and other stuff
- Not really a protocol its a format
- Most important concept in WebRTC
- The goal is to take the SDP generated by a user and send it "somehow" to the
  other party

Signaling:
- SDP Signaling
- Send the SDP that we just generated somehow to the other party we wish to
  communicate with
- Signaling can be done via a tweet, QR code, Whatsapp, WebSockets, HTTP
  request. It DOESN'T MATTER! Just get that large string to the other party

WebRTC Demystified:
- A wants to connect to B
- A creates an "offer", it finds all ICE candidates, security options,
  audio/video options, and generates SDP. The offer is basically the SDP
- A signals the offer somehow to B (Whatsapp)
- B creates the "answer" after setting A's offer
- B signals the "answer" to A
- Connection is created

WebRTC Demo:
- We will connect two browsers (Browser A & Browser B)
- A will create an offer (SDP) and set it as a local description
- B will get the offer and set it as a remote description
- B creates an answer sets it as its local description and signal the answer
  (SDP) to A
- A sets the answer as its remote description
- Connection established, exchange data channel

To begin this demo open the console on one web browser window and type:
#+begin_src javascript
  const lc = new RTCPeerConnection();
  const dc = lc.createDataChannel("channel");
  dc.onmessage = e => console.log("Just got a message " + e.data);
  e=> console.log("Connection opened!");
  lc.onicecandidate = e => console.log("New Ice Candidate! reprinting SDP " + JSON.stringify(lc.localDescription));
  lc.createOffer().then(o => lc.setLocalDescription(o)).then(a=> console.log("set successfully!"));
#+end_src

This should print out a new ICE candidate and gives us the string we have to
give our other web browser window. In our other browser window we can then type:
#+begin_src javascript
  const offer = 
#+end_src

Then we can paste the offer we got from our first browser window. With our offer
set we can run the following:
#+begin_src javascript
  const rc = new RTCPeerConnection();
  rc.onicecandidate = e => console.log("New Ice Candidate! reprinting SDP " + JSON.stringify(rc.localDescription));
  const rc.ondatachannel = e => {
    rc.dc = e.channel;
    rc.dc.onmessage = e => console.log("new message from client! " + e.data);
    rc.dc.onopen = e => console.log("Connection Opened!");
  }
  rc.setRemoteDescription(offer).then(a=> console.log("offer set!"));
  rc.createAnswer().then(a=> rc.setLocalDescription(a)).then(a=> console.log("answer created"));
#+end_src

This will give us an ICE answer. We can then copy this string and go back to our
first window and paste the string into a variable like this:
#+begin_src javascript
  const answer = 
#+end_src

We can then do this with the answer:
#+begin_src javascript
  lc.setRemoteDescription(answer);
  dc.send("Hello B, how is it going?");
#+end_src

We should instantly see the message in window B. We can send message from window
B like so:
#+begin_src javascript
  rc.dc.send("I'm doing great!");
#+end_src

WebRTC Pros and Cons:
Pros:
- P2p is great! Low latency for high bandwidth content
- Standardized API
Cons:
- Maintaining STUN & TURN servers
- Peer 2 Peer falls apart in case of multiple participants (discord case)

Media API:
- getUserMedia to access microphone, video camera
- RTCConnection.addTrack(stream)
- https://www.html5rocks.com/en/tutorials/webrtc/basics/

onIceCandidate and addIceCandidate:
- To maintain the connection as new candidates come and go
- onIceCandidate tells user there is a new candidate after the SDP has already
  been created
- The candidate is signaled and sent to the other party
- The other party uses addIceCandidate to add it to its SDP

Create your own STUN & TURN server:
- COTURN open source project
- https://github.com/coturn/coturn

Public STUN servers:
- stun1.1.google.com:19302
- stun2.1.google.com:19302
- stun3.1.google.com:19302
- stun4.1.google.com:19302
- stun.stunprotocol.org:3478
